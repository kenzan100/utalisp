(define lat? (lambda (l) (cond ((null? l) True) ((atom? (car l)) (lat? (cdr l))) (else False))))
(define or (lambda (exp1 exp2) (cond ((eq? True exp1) True) (else exp2))))
(define member? (lambda (a lat) (cond ((null? lat) False) (else (or (eq? (car lat) a) (member? a (cdr lat)))))))
(define rember (lambda (a lat) (cond ((null? lat) (q ())) ((eq? (car lat) a) (cdr lat)) (else (cons (car lat) (rember a (cdr lat)))))))
(define firsts (lambda (ll) (cond ((null? ll) (q ())) (else (cons (car (car ll)) (firsts (cdr ll)))))))
(define seconds (lambda (ll) (cond ((null? ll) (q ())) (else (cons (car (cdr (car ll))) (seconds (cdr ll)))))))
(define insertR (lambda (new old lat) (cond ((null? lat) (q ())) ((eq? (car lat) old) (cons (new (cdr lat)))) (else (cons (car lat) (insertR (new old (cdr lat))))))))
(define make-account (lambda (balance) (lambda (amt) (begin (set! balance (+ balance amt) balance)))))
(define account1 (make-account 100.0))
(define factorial (lambda (n) (cond ((eq? n 0) 1) (else (* n (factorial (- n 1)))))))
(define 掛け算 (lambda (数字A 数字B) (* 数字A 数字B)))
